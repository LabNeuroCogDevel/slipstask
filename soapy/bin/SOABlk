#!/usr/bin/env python
"""
TODO: 
 * finish SOA timing/confirm
 * write to file
 * ID split timing


1. More training trials
The thought was we could do maybe 2 learning blocks at the start while acquiring BOLD, then a whole bunch of extra blocks (with faster timing) while they do the mprage (~6-8 min?), then 2 more blocks with fmri.  That way, we'd see the start and end of the learning phase, but still get them a lot of training trials.

2. Block design for SOA/DD phases, with variable # of devaluations
Rather than the current event related design, which requires the variable and sometimes long ISIs, the thought was to do blocks of trials here with the timing matched to what we did behaviorally.  On top of that, we were thinking of varying how many cues are devalued in a given block, i.e., maybe 0, 2 or 4 (of 6)  This should produce variation among blocks in how many habitual responses people make due to task contrasts, as well as parametric contrasts within a devaluation size based on performance variability.  So, we'd want to repeat each block a bunch of times.  

We should discuss specific timing, but my thought was to aim for 16-20 min for each of DD/SOA.  If we did blocks of 1:20, with 0:40 OFF period in between, we could do something like 
- 2 blocks with 0 devaluations (this is kind of a silly one just for a control, so 2 blocks is probably enough?)
- 4 blocks with 2 cues devalued
- 4 blocks with 4 cues devalued

With OFF periods, that would be 20 min maybe we could split it into 2 10-minute runs, each with 1x0 devaluated, 2x2, 2x4.
"""

# q to quit at any time?
from psychopy.preferences import prefs
prefs.general['shutdownKey'] = 'q'

import sys
import os
import re
from datetime import datetime
from numpy import random, where
from soapy import ENDDUR
from soapy.task_types import PhaseType, TrialType, TimeTypes, TaskTime, Direction, TaskDur
from soapy.instruct import show_instruction, INSTRUCTIONS
from soapy.info import FabFruitInfo
from soapy.task import FabFruitTask, core
from soapy.lncdtasks import wait_for_scanner, wait_until, Filepath, first_key
from soapy import read_img_list, timing_path
from soapy.seeded import single_phase, update_boxes #, mkdir_seed
from soapy.gui import ymd, SOADlg, DlgInfo
from soapy.logstdout import default_logfile, log_stdout
from soapy.block import ID_blk, slips_blk, block_out_header

# save dir/files along side this script
os.chdir(os.path.dirname(os.path.realpath(__file__)))

# 5 seconds to take in the grid
# 2 seconds until SOA/DD is assumed pass
# 2 seconds to see the score at the end of every 12 (6 blocks twice)
# 1 second for SOA/DD iti
DURS = {'score': 2,
        'grid': 5,
        'timeout': 2,
        'fbk': 1,
        'iti': 1,
        'OFF': 40,
        'mprage': 6.4*60}

SEQUENCE = ['ID_start','ID_mprage','ID_end', 'OD', 'SOA','DD', 'SURVEY']

def main(argv, info={}):
    dlg = SOADlg()
    dlg.data = [
        DlgInfo('run', info.get('run', SEQUENCE[0]), SEQUENCE),
        DlgInfo('Instructions', info.get('Instructions', True)),
        DlgInfo('id', info.get('id', 1000), isfixed='id' in info.keys()),
        DlgInfo('date', ymd(), isfixed=True),
        DlgInfo('FullScreen', info.get('FullScreen', True)),
        # 20201007 - unlikely to use seed. always have seed.txt anyway
        # but we need the value in the dlg db. so just dont show it
        DlgInfo('seed', info.get('seed',0),isfixed='id' in info.keys(), show=False),
       ]
    info = dlg.set_data()


    #setup_outdir(info)
    #info['outdir'] = '/tmp/soamix'
    #info['seed'] = mkdir_seed(info['outdir'], info['seed'])
    log_stdout(default_logfile(info['outdir']))



    from psychopy.visual import Window
    if info.get('FullScreen', False):
        win = Window(fullscr=True) 
    else:
        win = Window([800, 600]) #, screen=1)


    # DD and second ID use same settings as ID_start and SOA
    # but we want them to be distinct from their pair
    # so we change the seed a bit
    # NB. maybe bad for picking ID timing files. 
    #     better to use the same seed and increment index?
    if info['run'] in ['DD']:
        seed = random.default_rng(info['seed']+1)
    else:
        seed = random.default_rng(info['seed'])


    log_fname = os.path.join(info['outdir'],f"{info['run']}_%H.%M.%S.csv")
    log_fname = datetime.strftime(datetime.now(), log_fname)
    run_log = open(log_fname, 'w')

    phase = PhaseType[re.match('(ID|OD|SOA|DD|SURVEY)', info['run'])[0]]
    print(phase)
    if info.get('Instructions',True):
        print(f"## Instructions for {phase}")
        show_instruction(win, phase, info['run'])

    # mix between onset and block timing
    if info['run'] in ['ID_mprage','SOA','DD']:
        timing_method=TimeTypes.block
        ffi = FabFruitInfo(seed=seed, alwaysTiming=False)
        block_out_header(run_log)

    else:
        timing_method=TimeTypes.onset
        if phase == PhaseType.SURVEY:
            nMR=0
        elif info['run'] == 'ID_end':
            nMR=2
        else: #OD, ID_start
            nMR=1
        ffi = single_phase(phase, info['seed'], 0, nMR, None, nbox=6)
        
        # need to truncate to first 2 block if ID
        if phase == PhaseType.ID:
            ffi.timing
            rep_ends = ffi.timing.ttype == TrialType.SCORE
            scnd_end = where(rep_ends)[0][1]+1
            # 74 (SHOW, FBK, ITI)*12*2. + 2 x SCORE
            ffi.timing = ffi.timing[:scnd_end]

    ffi = update_boxes(ffi, 'fruits', info['outdir'])
    task = FabFruitTask(win, ffi, timing_method=timing_method)
    task.save_path = log_fname # only useful w/run()

    print(f"## RUNNING {info['run']}")
    if info['run'] in ['ID_start', 'ID_end']:
        starttime = wait_for_scanner(win)
        task.run(starttime)
        task.save_progress()
        task.iti()
        core.wait(ENDDUR)

    elif info['run'] == 'ID_mprage':
        ID_blk(task, DURS, seed, fout=run_log)

    elif info['run'] == 'OD':
        starttime = wait_for_scanner(win)
        task.run(starttime)
        task.save_progress()
        task.iti()
        core.wait(ENDDUR)

    elif info['run'] in ['SOA', 'DD']:
        slips_blk(task, DURS, seed, phase=phase, fout=run_log)

    elif info['run'] in ['SURVEY']:
        task.survey()
    else:
        print(f"## unkown run type {info['run']}")


    # onto the next one
    win.close()
    return info

if __name__ == "__main__":
    info = main(sys.argv)
    last_run = info.get('run',SEQUENCE[0])
    while last_run != SEQUENCE[-1]:
        cur_idx = SEQUENCE.index(last_run) 
        info['run'] = SEQUENCE[cur_idx+1]
        info = main(sys.argv, info)
        last_run = info.get('run',SEQUENCE[0])
        try:
            run_log.close()
        except:
            pass


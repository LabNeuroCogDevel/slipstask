#!/usr/bin/env python3

# q to quit at any time?
from psychopy.preferences import prefs
prefs.general['shutdownKey'] = 'q'

import sys
import os
from datetime import datetime
from numpy import random
from psychopy.gui import Dlg, DlgFromDict
from typing import Optional, List
from soapy.task_types import PhaseType
from soapy.info import FabFruitInfo
from soapy.instruct import show_instruction
from soapy.task import FabFruitTask
from soapy.lncdtasks import wait_for_scanner, Filepath
from soapy import DEFAULT_PHASES, image_path, read_img_list, timing_path

INFO = {}  # defined in main_info


def show_error(msg):
    """quick dialog popup to report issues"""
    d = Dlg(title=msg)
    d.addText(msg)
    d.show()


def validate() -> bool:
    """check inputs are sane
    Dlg modifies global INFO dict
    @return True if all good
    side-effects: modify INFO
    """
    global INFO
    if not INFO['ID']:
        show_error("no ID given")
        return False
    try:
        INFO['obj_seed'] = int(INFO['obj_seed'])
    except ValueError:
        show_error("bad/no obj_seed: must be a whole number")
        return False

    try:
        INFO['phase_type'] = PhaseType[INFO['phase']]
    except KeyError:
        show_error(f"error using {INFO['phase']}!")
        return False

    now = datetime.now()
    INFO['vdate'] = datetime.strftime(now, "%Y%m%d")
    INFO['vtime'] = datetime.strftime(now, "%H:%M.%S")
    outdir = os.path.join("task_data", INFO['ID'], INFO['vdate'])
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    INFO['outdir'] = outdir
    # reuse or pick new seed
    seed_file = os.path.join(outdir, "seed.txt")
    seed = pick_seed(seed_file)
    if not seed:
        return False

    INFO['seed'] = seed

    return True


def pick_seed(seed_file: Filepath) -> Optional[random._generator.Generator]:
    """ seed can be specified or read from file
        but if both and they dont agree, panic
    @param seed_file - file to read seed from
    @param numpy.random.default_rng(seed)
    @return numpy random seed object
    sideffect - update INFO['obj_seed']
    """
    global INFO
    seed = 0
    if os.path.isfile(seed_file):
        with open(seed_file) as f:
            seed = int(f.readline().replace("\n", ""))

    # use file if we have it
    # unless expliclty set set seed from dialog
    # then check against known seed
    if not INFO['obj_seed'] and not seed:
        seed = int(random.uniform(10**10))
    elif not seed:
        seed = INFO['obj_seed']
    elif not INFO['obj_seed']:
        pass  # didn't try to change the seed, left at 0 in dialog. use file
    elif INFO['obj_seed'] != seed:
        show_error(f"already have seed {seed} in {seed_file}.\n" +
                   f"you provided {INFO['obj_seed']}\n" +
                   f"Either set dialog value to {seed} or remove {seed_file}")
        return None

    # write seed to file
    if not os.path.isfile(seed_file):
        with open(seed_file, "w") as f:
            f.write(f"{seed}")

    INFO['obj_seed'] = seed
    return random.default_rng(seed)


def main_info():
    global INFO
    # prompt until we're good or we cancel
    isvalid = False
    while not isvalid:
        # task settings - inside loop or we'd loos list of options
        INFO = {
            'ID': '',
            'obj_seed': 0,
            'objs': ['fruits', 'animals', 'veggies'],
            'phase': ['ID', 'OD', 'DD', 'SOA'],
            'fullscreen': False,
            'instruction': True,
            'MR': False,
            'quick_test': True,
        }
        dlg = DlgFromDict(INFO, title="Slips of Action/Fab Fruits")
        if not dlg.OK:
            sys.exit(1)
        isvalid = validate()

        print(f"task INFO: {INFO}")


# ## Start
main_info()
p = INFO['phase_type']

# use psudeo-random times?
if INFO['MR']:
    timing = timing_path(p)
    random.default_rng(INFO['obj_seed']).shuffle(timing)
    # TODO: dialog to set number of blocks
    blockinfo = {'start': 0, 'end': 3}
    pdlg = DlgFromDict(blockinfo, title="Slips of Action/Fab Fruits: settings")
    if not pdlg.OK:
        sys.exit(1)
    timing = timing[blockinfo['start']:blockinfo['end']]
    print(f"MR: using timing files for {blockinfo['start']} to {blockinfo['end']}: {timing} ")
    ffi = FabFruitInfo(timing_files=timing, seed=INFO['seed'])
else:
    phase_settings = DEFAULT_PHASES[p]
    phase_settings['itis'] = ",".join([str(x) for x in phase_settings.get('itis', [])])
    pdlg = DlgFromDict(phase_settings, title="Slips of Action/Fab Fruits: settings")
    if not pdlg.OK:
        sys.exit(1)
    phase_settings['itis'] = [float(x) for x in phase_settings['itis'].split(",")]
    # build task
    ffi = FabFruitInfo({p: phase_settings}, seed=INFO['seed'])

# set fruits/animals/veggies. will use ffi.seed for random assignment
ffi.set_names(read_img_list(INFO['objs']))
ffi.save_boxes(os.path.join(INFO['outdir'], 'boxes.txt')) # will error if boxes change order/name

# psychopy takes a bit to load. import here b/c we want a speedier dialog window
from psychopy.visual import Window

res = [] if INFO['fullscreen'] else [800, 600]
win = Window(res)


# if we are testing
if INFO.get('quick_test'):
    ffi.timing = ffi.timing.loc[0:15]
if INFO.get('instruction'):
    show_instruction(win, p)
# ## Build the task
task = FabFruitTask(win, ffi)
task.save_path = os.path.join(INFO['outdir'], f"{INFO['vtime']}_{INFO['phase']}.csv")


# when preset timing is not important, we can use
# "duration" based timing instead of onset
#
# on MR, we also need to wait for the scanner trigger
# to say we actually started
if INFO.get('MR'):
    starttime = wait_for_scanner(win)
    # TODO: shuffle best timing list
else:
    task.timing_method = 'dur'
    starttime = None

# do it
task.run(starttime)
task.save_progress()

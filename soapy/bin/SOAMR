#!/usr/bin/env python3

# q to quit at any time?
from psychopy.preferences import prefs
prefs.general['shutdownKey'] = 'q'

import sys
import os
from datetime import datetime
from numpy import random
from psychopy.gui import Dlg, DlgFromDict
from typing import Optional, List, Tuple, Dict
from soapy.task_types import PhaseType
from soapy.instruct import show_instruction
from soapy.task import FabFruitTask
from soapy.lncdtasks import wait_for_scanner, Filepath
from soapy import DEFAULT_PHASES, image_path, read_img_list, timing_path
from soapy.seeded import pick_seed, single_phase, update_boxes

SEQUENCE = ['ID', 'OD', 'DD', 'SURVEY']


def show_error(msg) -> bool:
    """quick dialog popup to report issues"""
    d = Dlg(title=msg)
    d.addText(msg)
    d.show()
    return d.OK


class DlgInfo:
    """hold onto dialog inforamation"""
    def __init__(self, name, val, choices=None, isfixed=False):
        self.name = name
        self.val = val
        self.choices = choices
        self.isfixed = isfixed
        self.handle = None

    def add(self, dlg):
        """add this info as a field in a dialog box"""
        if self.isfixed:
            self.handle = dlg.addFixedField(self.name, self.val)
        else:
            self.handle = dlg.addField(self.name, self.val,
                                       choices=self.choices)
        return(self.handle)

    def __repr__(self):
        return f"{self.name}->{self.val} ({self.choices})"


def ymd() -> str:
    return datetime.strftime(datetime.now(), "%Y%m%d")


def setup_outdir(d):
    """@side-effect: update d with outdir. must have id and date"""
    d.update({'outdir':
              os.path.join("soa_data", str(d['id']), d['date'])})


def mkdir_seed(d) -> int:
    """ given dict with outdir and 'seed' interger
    return seed read from file if exists
    @side-effect make directory
    """
    if not os.path.exists(d['outdir']):
        os.makedirs(d['outdir'])

    # reuse or pick new seed
    seed_file = os.path.join(d['outdir'], "seed.txt")
    # N.B. this should also update the gui
    seed = pick_seed(seed_file, d['seed'])
    return seed

class SOADlg:
    def __init__(self):
        self.data = [
          DlgInfo('id', 10000),
          DlgInfo('date', ymd(), isfixed=True),
          DlgInfo('start', 'ID', SEQUENCE),
          DlgInfo('boxes', 6, [4, 6]),
          DlgInfo('Instructions', True),
          DlgInfo('FullScreen', True),
          DlgInfo('seed', 0)]
        self.names = [i.name for i in self.data]

    def get_data(self) -> Dict:
        """turn self.data's list into a dict"""
        d = {i.name: i.val for i in self.data}
        setup_outdir(d)

        return d

    def set_data(self) -> Dict:
        """use a dialog to set info data"""
        dlg = Dlg(title="Slips of Action/Fab Fruits")
        self.handels = {i.name: i.add(dlg) for i in self.data}
        dlg_data = dlg.show()
        if not dlg.OK:
            sys.exit(1)

        # update SAODlg
        for i, d in zip(self.data, dlg_data):
            i.val = d

        okay, msg = self.validate()
        if not okay:
            if not show_error(msg):
                sys.exit(1)
            else:
                return self.set_data()
        return self.get_data()

    def validate(self) -> Tuple[bool, str]:
        """validate id and seed
        also make output directory, and change seed if already exists
        @return (OKAY?, MSG)
        """
        d = self.get_data()
        if not d['id']:
            return (False, "Bad ID!")
        try:
            d['seed'] = int(d['seed'])
        except ValueError:
            return (False, "bad/no seed: must be a whole number")

        try:
            seed = mkdir_seed(d)
            self.data[self.names.index('seed')].val = seed
        except Exception as err:
            return (False, f"{err}")

        return (True, "all good")


if len(sys.argv) < 2:
    info_dlg = SOADlg()
    info = info_dlg.set_data()
    # psychopy takes a bit to load.
    from psychopy.visual import Window
    if info['FullScreen']:
        win = Window(fullscr=True)
    else:
        win = Window([800, 600])
else:
    info = {'id': sys.argv[1],
            'start': sys.argv[2],
            'date': ymd(),
            'FullScreen': False,
            'Instructions': False,
            'boxes': 4,
            'doit': len(sys.argv) > 3,
            'seed': 0}
    setup_outdir(info)
    info['seed'] = mkdir_seed(info)

start = SEQUENCE.index(info['start'])
phase_seq = [PhaseType[x] for x in SEQUENCE[start:len(SEQUENCE)]]

for p in phase_seq:
    # survey is not designed for MR
    nMR = 0 if p == PhaseType.SURVEY else 1
    ffi = single_phase(p, info['seed'], 0, nMR, None, nbox=info['boxes'])
    # destroys devalued_blocks?
    # info.py| set_names -> make_boxes -> seeded shuffle
    # task.py| this_score = bx.score(e.phase, e.blocknum, e.side)
    # box.py | bnum in self.devalued_blocks[btype]:
    ffi = update_boxes(ffi, 'fruits', info['outdir'])

    # if we just want to actually run the presentation
    if not info.get('doit', True):
        print(f"# skipping. give 3rd argument to {sys.argv[0]} to actually run")
        seecols = ['onset', 'ttype', 'cor_side', 'LR1', 'top', 'bottom', 'deval', 'bxidx']
        print(ffi.timing[seecols].to_csv(sep="\t"))
        continue

    # if we are testing
    if info.get('Instruction'):
        show_instruction(win, p)
    # ## Build the task
    task = FabFruitTask(win, ffi)
    vtime = datetime.strftime(datetime.now(), "%H:%M.%S")
    task.save_path = os.path.join(info['outdir'], f"{vtime}_{p.name}.csv")
    # do it
    if p == PhaseType.SURVEY:
        task.survey()
    else:
        starttime = wait_for_scanner(win)
        task.run(starttime)
        task.save_progress()
